// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderManagement.Infrastructure.DatabaseContexts;

#nullable disable

namespace OrderManagement.Infrastructure.Migrations
{
    [DbContext(typeof(OrderManagementContext))]
    [Migration("20231118082008_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.Cryptocurrency", b =>
                {
                    b.Property<Guid>("CryptoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CryptoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 4)
                        .HasColumnType("decimal(9,4)");

                    b.Property<string>("SymbolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CryptoId");

                    b.ToTable("Cryptocurrencies");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.Trade", b =>
                {
                    b.Property<Guid>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 4)
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 4)
                        .HasColumnType("decimal(9,4)");

                    b.Property<DateTime>("TradeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TradeStatus")
                        .HasColumnType("int");

                    b.Property<int>("TradeType")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TradeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("WalletId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 4)
                        .HasColumnType("decimal(9,4)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CryptoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WalletId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CryptoId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.WalletAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasPrecision(9, 4)
                        .HasColumnType("decimal(9,4)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId");

                    b.ToTable("WalletAccounts");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.Trade", b =>
                {
                    b.HasOne("OrderManagement.Infrastructure.Entities.WalletAccount", "WalletAccount")
                        .WithMany("Trades")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OrderManagement.Infrastructure.Entities.Wallet", "Wallet")
                        .WithMany("Trades")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Wallet");

                    b.Navigation("WalletAccount");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.Wallet", b =>
                {
                    b.HasOne("OrderManagement.Infrastructure.Entities.WalletAccount", "WalletAccount")
                        .WithMany("Wallets")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagement.Infrastructure.Entities.Cryptocurrency", "Cryptocurrency")
                        .WithMany("Wallets")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cryptocurrency");

                    b.Navigation("WalletAccount");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.Cryptocurrency", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.Wallet", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("OrderManagement.Infrastructure.Entities.WalletAccount", b =>
                {
                    b.Navigation("Trades");

                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
